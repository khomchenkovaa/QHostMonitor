#include "htmlLogger.h"
#include "tTest.h"
#include <QDateTime>

namespace SDPO {

/***********************************************/

HtmlLogger::HtmlLogger(QObject *parent) :
    QObject(parent),
    m_isStarted(false)
{
}

/***********************************************/

HtmlLogger::~HtmlLogger()
{
    stopLog();
}

/***********************************************/

bool HtmlLogger::startLog(const QString &logFileName)
{
    if(!m_isStarted){
        m_logFile.setFileName(logFileName);
        bool fileExists = m_logFile.exists();
        if (m_logFile.open(QFile::WriteOnly | QFile::Append | QFile::Text)){
            m_outTextStream.setDevice(&m_logFile);
            m_isStarted = true;
            if (!fileExists) {
                writeHead();
            }
        }
    }
    return m_isStarted;
}

/***********************************************/

void HtmlLogger::stopLog()
{
    if(m_isStarted){
        m_logFile.close();
        m_outTextStream.reset();
        m_isStarted = false;
    }
}

/***********************************************/

bool HtmlLogger::log(TTest *test)
{
    if (!m_isStarted) {
        return false;
    }

    QString ksfd = QString("<!--KSFD-%1-->").arg(test->getTestTime().toString("yyyyMMddhhmmss"));
    QString testTime = QString("<!--KSIM-->%1%2<!--KSIM-->").arg(ksfd).arg(test->testTime());
    QString testName = QString("<!--KSIM-->%1<!--TI%2--><!--KSIM-->").arg(test->testName()).arg(test->getID());
    QString status = QString("<!--KSIM-->%1<!--KSIM-->").arg(test->status());
    QString reply = QString("<!--KSIM-->%1<!--KSIM-->").arg(test->getReply());
    QString testMethod = QString("<!--KSIM-->%1<!--KSIM-->").arg(test->property("TestMethod").toString());

    m_outTextStream << " <tr>\n"
             << QString("   <td bgcolor=\"#D6D6D6\" nowrap valign=\"top\" align=\"center\">&nbsp;<font color=\"#000000\">%1</font>&nbsp;</td>\n").arg(testTime)
             << QString("   <td bgcolor=\"#D6D6D6\" nowrap valign=\"top\" align=\"left\">  &nbsp;<font color=\"#000000\">%1</font>&nbsp;</td>\n").arg(testName)
             << QString("   <td bgcolor=\"#D6D6D6\" nowrap valign=\"top\" align=\"center\">&nbsp;<font color=\"#000000\">%1</font>&nbsp;</td>\n").arg(status)
             << QString("   <td bgcolor=\"#D6D6D6\" nowrap valign=\"top\" align=\"center\">&nbsp;<font color=\"#000000\">%1</font>&nbsp;</td>\n").arg(reply)
             << QString("   <td bgcolor=\"#D6D6D6\" nowrap valign=\"top\" align=\"left\">  &nbsp;<font color=\"#000000\">%1</font>&nbsp;</td>\n").arg(testMethod)
             << " </tr>\n";
    return true;
}

/***********************************************/

void HtmlLogger::writeHead()
{
    if (!m_isStarted) {
        return;
    }

    m_outTextStream << "<html><head>\n"
    << "<meta name=\"GENERATOR\" content=\"SDPO\">\n"
    << "<title>HostMonitor Log</title>\n"
    << "<STYLE TYPE=\"text/css\"><!-- a:hover { color: \"#0000FF\"; } --> </STYLE>\n"
    << "</head>"
    << "<body bgcolor=\"#E9E9E9\" text=\"#000000\" link=\"#0000FF\" vlink=\"#0000FF\" alink=\"#0000FF\">\n"
    << "<p align=\"left\"><u><strong><big>HostMonitor Log</big> &nbsp; &nbsp; &nbsp; (generated by <a href=\"http://sniip.ru\" target=\"_blank\"><strong>SDPO</strong></a></strong></u>)<br>\n"
    << QString("<font face=\"Arial\">Logging started at %1</font></p>\n").arg(QDateTime::currentDateTime().toString("hh:mm:ss, dd/MM/yyyy"))
    << "<div align=\"center\"><center>\n"
    << "<table border=\"0\" bordercolor=\"#E9E9E9\" width=\"100%\">\n"
    << " <tr>\n"
    << "   <td bgcolor=\"#0000FF\" nowrap align=\"center\"><strong><font color=\"#FFFFFF\">Event time</font></strong></td>\n"
    << "   <td bgcolor=\"#0000FF\" nowrap align=\"center\"><strong><font color=\"#FFFFFF\">Test</font></strong></td>\n"
    << "   <td bgcolor=\"#0000FF\" nowrap align=\"center\"><strong><font color=\"#FFFFFF\">Status</font></strong></td>\n"
    << "   <td bgcolor=\"#0000FF\" nowrap align=\"center\"><strong><font color=\"#FFFFFF\">Reply</font></strong></td>\n"
    << "   <td bgcolor=\"#0000FF\" nowrap align=\"center\"><strong><font color=\"#FFFFFF\">Test method</font></strong></td>\n"
    << " </tr>\n";
}

/***********************************************/

void HtmlLogger::writeFooter()
{
    if (!m_isStarted) {
        return;
    }

    m_outTextStream << "</table>\n"
    << "</div>\n"
    << "</body>\n"
    << "</html>\n";
}

/***********************************************/

} // namespace SDPO
